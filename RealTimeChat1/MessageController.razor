@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@using static RealTimeChat1.Shared.MessageInputField

<MessageInputField OnClickCallback="@GetMessageInput" />


@code {
	// messageContainer решает проблему с контекстом работы хаба
	private HubConnection hubConnection;
	public string userNameInput="Igor"; // добавить логику работы с UserName
	public string messageInput =" s";
	public Message inputMessage;


	// логика получения сообщений//////////////////////////////////////////////////////////////////////////////////////////
	[Parameter]
	public EventCallback<List<Message>> OnReceiveMessageCallback { get; set; }

	//MessageController messageController = new MessageController();

	//public void OnRecive()//ПЕРЕДАЕМ КОНТЕЙНЕРУ СПИСОК СООБЩЕНИЙ
	//{
	//	OnReceiveMessageCallback.InvokeAsync(messages);
	//}



	private List<Message> messages = new List<Message>();




	//логика отправки сообщения на сервер///////////////////////////////////////////////////////////////////////////////////////////
	private void GetMessageInput( string _message)
	{
		messageInput = _message;//текст передается успешно
	}



	


	//protected override async Task OnInitializedAsync()
	//{
	//	hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();
	//	hubConnection.On<string, string>("ReceiveMessage", (userNameInput,messageInput) =>
	//	{
	//		messages.Add($"{userNameInput}: {messageInput}");
	//		StateHasChanged();
	//		//messageController.OnRecive();
	//	});
	//	await hubConnection.StartAsync();
	//}


	// добавить логику отображения собственных сообщений
	async Task Send()
	=> await hubConnection.SendAsync("SendMessage", userNameInput, messageInput);


	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();
		hubConnection.On<Message>("ReceiveMessage", (_message) =>
		{
			messages.Add(new Message(_message.User, _message.MessageText, _message.SendTime));

			StateHasChanged();
			//messageController.OnRecive();
		});
		await hubConnection.StartAsync();
	}

}

