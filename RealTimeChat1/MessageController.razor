@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@using RealTimeChat1.Shared.MessageInputField

<MessageInputField OnClickCallback="@GetMessageInput" />


@code {
	// messageContainer решает проблему с контекстом работы хаба
	private HubConnection hubConnection;
	private string userNameInput; // добавить логику работы с UserName
	private string messageInput;

	private List<Message> messages = new List<Message>()

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();
		hubConnection.On<Message>("ReceiveMessage", (_message) =>
		{
			messages.Add(new Message( _message.UserImage,_message.UserName,_message.MessageText,_message.SendTime))

			StateHasChanged();
			OnRecieve();
		});
		await hubConnection.StartAsync();
	}



	// логика получения сообщений//////////////////////////////////////////////////////////////////////////////////////////
	[Parameter]
	public EventCallback<List<Message>> OnReceiveMessageCallback { get; set; }

	void OnRecive()//ПЕРЕДАЕМ КОНТЕЙНЕРУ СПИСОК СООБЩЕНИЙ
	{
		OnReceiveMessageCallback.InvokeAsync(messages);
	}





	//логика отправки сообщения на сервер///////////////////////////////////////////////////////////////////////////////////////////
	private void GetMessageInput(string _messageInput)
	{
		messageInput = _messageInput;
	}

	// добавить логику отображения собственных сообщений
	async Task Send()
	=> await hubConnection.SendAsync("SendMessage", userNameInput, messageInput);

}

