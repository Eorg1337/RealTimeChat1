@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@using static RealTimeChat1.Shared.MessageInputField

<MessageInputField OnClickCallback="@GetMessageInput" />


@code {
	// messageContainer решает проблему с контекстом работы хаба
	private HubConnection hubConnection;
	public Message inputMessage = new Message();


	// логика получения сообщений//////////////////////////////////////////////////////////////////////////////////////////
	[Parameter]
	public EventCallback<List<Message>> OnReceiveMessageCallback { get; set; }

	private List<Message> messages = new List<Message>();


	//логика отправки сообщения на сервер///////////////////////////////////////////////////////////////////////////////////////////
	private void GetMessageInput( string _message)
	{
		inputMessage.MessageText = _message;//текст передается успешно
		InvokeAsync(Send);
	}

	// добавить логику отображения собственных сообщений
	async Task Send()
	=> await hubConnection.SendAsync("SendMessage", inputMessage);


	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();
		hubConnection.On<Message>("ReceiveMessage", (inputMessage) =>
		{
			messages.Add(new Message(inputMessage.User, inputMessage.MessageText));
			//StateHasChanged();
			InvokeAsync(OnReceive);
			
		});
		await hubConnection.StartAsync();
	}


	void OnReceive()
	{
		OnReceiveMessageCallback.InvokeAsync(messages);
	}
}

